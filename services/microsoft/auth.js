'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.getUserToken = exports.refreshToken = exports.getTokenFromCode = exports.getAuthUrl = undefined;var _logger = require('../logger');var _logger2 = _interopRequireDefault(_logger);
var _simpleOauth = require('simple-oauth2');var _simpleOauth2 = _interopRequireDefault(_simpleOauth);
var _jsonwebtoken = require('jsonwebtoken');var _jsonwebtoken2 = _interopRequireDefault(_jsonwebtoken);
var _cryptr = require('cryptr');var _cryptr2 = _interopRequireDefault(_cryptr);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

const cryptr = new _cryptr2.default(process.env.CRYPTR_SECRET || 'unsecure_secret');

const debug = (0, _logger2.default)('services:auth', 'debug');
const credentials = {
  client: {
    id: process.env.MS_APP_ID,
    secret: process.env.MS_APP_PASSWORD },

  auth: {
    tokenHost: 'https://login.microsoftonline.com',
    authorizePath: 'common/oauth2/v2.0/authorize',
    tokenPath: 'common/oauth2/v2.0/token' } };


const oauth2 = _simpleOauth2.default.create(credentials);

function getAuthUrl(user) {
  const url = oauth2.authorizationCode.authorizeURL({
    redirect_uri: process.env.MS_REDIRECT_URI,
    scope: process.env.MS_APP_SCOPES,
    state: user });

  debug(`Generated auth url: ${url}`);
  return url;
}

async function getTokenFromCode(authCode, res) {
  let result = await oauth2.authorizationCode.getToken({
    code: authCode,
    redirect_uri: process.env.MS_REDIRECT_URI,
    scope: process.env.MS_APP_SCOPES });


  const token = oauth2.accessToken.create(result);
  debug('Token created');

  const user = _jsonwebtoken2.default.decode(token.token.id_token);

  return {
    token: token.token.access_token,
    refreshToken: token.token.refresh_token,
    tokenExpires: token.token.expires_at.getTime(),
    userName: user.name };

}

async function refreshToken(refreshToken) {
  const token = await oauth2.accessToken.create({ refresh_token: refreshToken }).refresh();
  return {
    token: token.token.access_token,
    refreshToken: token.token.refresh_token,
    tokenExpires: token.token.expires_at.getTime(),
    userName: user.name };

}

async function getUserToken(uid, controller) {
  const user = await controller.storage.users.get(uid);
  if (!user || !user.msToken) {
    return {
      userExists: !!user,
      tokenExists: !!user && !!user.msToken };

  }
  return {
    userExists: true,
    tokenExists: true,
    token: JSON.parse(cryptr.decrypt(user.msToken)) };

}exports.


getAuthUrl = getAuthUrl;exports.
getTokenFromCode = getTokenFromCode;exports.
refreshToken = refreshToken;exports.
getUserToken = getUserToken;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NlcnZpY2VzL21pY3Jvc29mdC9hdXRoLmpzIl0sIm5hbWVzIjpbImNyeXB0ciIsIkNyeXB0ciIsInByb2Nlc3MiLCJlbnYiLCJDUllQVFJfU0VDUkVUIiwiZGVidWciLCJjcmVkZW50aWFscyIsImNsaWVudCIsImlkIiwiTVNfQVBQX0lEIiwic2VjcmV0IiwiTVNfQVBQX1BBU1NXT1JEIiwiYXV0aCIsInRva2VuSG9zdCIsImF1dGhvcml6ZVBhdGgiLCJ0b2tlblBhdGgiLCJvYXV0aDIiLCJPYXV0aDIiLCJjcmVhdGUiLCJnZXRBdXRoVXJsIiwidXNlciIsInVybCIsImF1dGhvcml6YXRpb25Db2RlIiwiYXV0aG9yaXplVVJMIiwicmVkaXJlY3RfdXJpIiwiTVNfUkVESVJFQ1RfVVJJIiwic2NvcGUiLCJNU19BUFBfU0NPUEVTIiwic3RhdGUiLCJnZXRUb2tlbkZyb21Db2RlIiwiYXV0aENvZGUiLCJyZXMiLCJyZXN1bHQiLCJnZXRUb2tlbiIsImNvZGUiLCJ0b2tlbiIsImFjY2Vzc1Rva2VuIiwiand0IiwiZGVjb2RlIiwiaWRfdG9rZW4iLCJhY2Nlc3NfdG9rZW4iLCJyZWZyZXNoVG9rZW4iLCJyZWZyZXNoX3Rva2VuIiwidG9rZW5FeHBpcmVzIiwiZXhwaXJlc19hdCIsImdldFRpbWUiLCJ1c2VyTmFtZSIsIm5hbWUiLCJyZWZyZXNoIiwiZ2V0VXNlclRva2VuIiwidWlkIiwiY29udHJvbGxlciIsInN0b3JhZ2UiLCJ1c2VycyIsImdldCIsIm1zVG9rZW4iLCJ1c2VyRXhpc3RzIiwidG9rZW5FeGlzdHMiLCJKU09OIiwicGFyc2UiLCJkZWNyeXB0Il0sIm1hcHBpbmdzIjoibUxBQUEsbUM7QUFDQSw0QztBQUNBLDRDO0FBQ0EsZ0M7O0FBRUEsTUFBTUEsU0FBUyxJQUFJQyxnQkFBSixDQUFXQyxRQUFRQyxHQUFSLENBQVlDLGFBQVosSUFBNkIsaUJBQXhDLENBQWY7O0FBRUEsTUFBTUMsUUFBUSxzQkFBTyxlQUFQLEVBQXdCLE9BQXhCLENBQWQ7QUFDQSxNQUFNQyxjQUFjO0FBQ2xCQyxVQUFRO0FBQ05DLFFBQUlOLFFBQVFDLEdBQVIsQ0FBWU0sU0FEVjtBQUVOQyxZQUFRUixRQUFRQyxHQUFSLENBQVlRLGVBRmQsRUFEVTs7QUFLbEJDLFFBQU07QUFDSkMsZUFBVyxtQ0FEUDtBQUVKQyxtQkFBZSw4QkFGWDtBQUdKQyxlQUFXLDBCQUhQLEVBTFksRUFBcEI7OztBQVdBLE1BQU1DLFNBQVNDLHNCQUFPQyxNQUFQLENBQWNaLFdBQWQsQ0FBZjs7QUFFQSxTQUFTYSxVQUFULENBQXFCQyxJQUFyQixFQUEyQjtBQUN6QixRQUFNQyxNQUFNTCxPQUFPTSxpQkFBUCxDQUF5QkMsWUFBekIsQ0FBc0M7QUFDaERDLGtCQUFjdEIsUUFBUUMsR0FBUixDQUFZc0IsZUFEc0I7QUFFaERDLFdBQU94QixRQUFRQyxHQUFSLENBQVl3QixhQUY2QjtBQUdoREMsV0FBT1IsSUFIeUMsRUFBdEMsQ0FBWjs7QUFLQWYsUUFBTyx1QkFBc0JnQixHQUFJLEVBQWpDO0FBQ0EsU0FBT0EsR0FBUDtBQUNEOztBQUVELGVBQWVRLGdCQUFmLENBQWlDQyxRQUFqQyxFQUEyQ0MsR0FBM0MsRUFBZ0Q7QUFDOUMsTUFBSUMsU0FBUyxNQUFNaEIsT0FBT00saUJBQVAsQ0FBeUJXLFFBQXpCLENBQWtDO0FBQ25EQyxVQUFNSixRQUQ2QztBQUVuRE4sa0JBQWN0QixRQUFRQyxHQUFSLENBQVlzQixlQUZ5QjtBQUduREMsV0FBT3hCLFFBQVFDLEdBQVIsQ0FBWXdCLGFBSGdDLEVBQWxDLENBQW5COzs7QUFNQSxRQUFNUSxRQUFRbkIsT0FBT29CLFdBQVAsQ0FBbUJsQixNQUFuQixDQUEwQmMsTUFBMUIsQ0FBZDtBQUNBM0IsUUFBTSxlQUFOOztBQUVBLFFBQU1lLE9BQU9pQix1QkFBSUMsTUFBSixDQUFXSCxNQUFNQSxLQUFOLENBQVlJLFFBQXZCLENBQWI7O0FBRUEsU0FBTztBQUNMSixXQUFPQSxNQUFNQSxLQUFOLENBQVlLLFlBRGQ7QUFFTEMsa0JBQWNOLE1BQU1BLEtBQU4sQ0FBWU8sYUFGckI7QUFHTEMsa0JBQWNSLE1BQU1BLEtBQU4sQ0FBWVMsVUFBWixDQUF1QkMsT0FBdkIsRUFIVDtBQUlMQyxjQUFVMUIsS0FBSzJCLElBSlYsRUFBUDs7QUFNRDs7QUFFRCxlQUFlTixZQUFmLENBQTZCQSxZQUE3QixFQUEyQztBQUN6QyxRQUFNTixRQUFRLE1BQU1uQixPQUFPb0IsV0FBUCxDQUFtQmxCLE1BQW5CLENBQTBCLEVBQUV3QixlQUFlRCxZQUFqQixFQUExQixFQUEyRE8sT0FBM0QsRUFBcEI7QUFDQSxTQUFPO0FBQ0xiLFdBQU9BLE1BQU1BLEtBQU4sQ0FBWUssWUFEZDtBQUVMQyxrQkFBY04sTUFBTUEsS0FBTixDQUFZTyxhQUZyQjtBQUdMQyxrQkFBY1IsTUFBTUEsS0FBTixDQUFZUyxVQUFaLENBQXVCQyxPQUF2QixFQUhUO0FBSUxDLGNBQVUxQixLQUFLMkIsSUFKVixFQUFQOztBQU1EOztBQUVELGVBQWVFLFlBQWYsQ0FBNkJDLEdBQTdCLEVBQWtDQyxVQUFsQyxFQUE4QztBQUM1QyxRQUFNL0IsT0FBTyxNQUFNK0IsV0FBV0MsT0FBWCxDQUFtQkMsS0FBbkIsQ0FBeUJDLEdBQXpCLENBQTZCSixHQUE3QixDQUFuQjtBQUNBLE1BQUksQ0FBQzlCLElBQUQsSUFBUyxDQUFDQSxLQUFLbUMsT0FBbkIsRUFBNEI7QUFDMUIsV0FBTztBQUNMQyxrQkFBWSxDQUFDLENBQUNwQyxJQURUO0FBRUxxQyxtQkFBYSxDQUFDLENBQUNyQyxJQUFGLElBQVUsQ0FBQyxDQUFDQSxLQUFLbUMsT0FGekIsRUFBUDs7QUFJRDtBQUNELFNBQU87QUFDTEMsZ0JBQVksSUFEUDtBQUVMQyxpQkFBYSxJQUZSO0FBR0x0QixXQUFPdUIsS0FBS0MsS0FBTCxDQUFXM0QsT0FBTzRELE9BQVAsQ0FBZXhDLEtBQUttQyxPQUFwQixDQUFYLENBSEYsRUFBUDs7QUFLRCxDOzs7QUFHQ3BDLFUsR0FBQUEsVTtBQUNBVSxnQixHQUFBQSxnQjtBQUNBWSxZLEdBQUFBLFk7QUFDQVEsWSxHQUFBQSxZIiwiZmlsZSI6ImF1dGguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbG9nZ2VyIGZyb20gJy4uL2xvZ2dlcidcbmltcG9ydCBPYXV0aDIgZnJvbSAnc2ltcGxlLW9hdXRoMidcbmltcG9ydCBqd3QgZnJvbSAnanNvbndlYnRva2VuJ1xuaW1wb3J0IENyeXB0ciBmcm9tICdjcnlwdHInXG5cbmNvbnN0IGNyeXB0ciA9IG5ldyBDcnlwdHIocHJvY2Vzcy5lbnYuQ1JZUFRSX1NFQ1JFVCB8fCAndW5zZWN1cmVfc2VjcmV0JylcblxuY29uc3QgZGVidWcgPSBsb2dnZXIoJ3NlcnZpY2VzOmF1dGgnLCAnZGVidWcnKVxuY29uc3QgY3JlZGVudGlhbHMgPSB7XG4gIGNsaWVudDoge1xuICAgIGlkOiBwcm9jZXNzLmVudi5NU19BUFBfSUQsXG4gICAgc2VjcmV0OiBwcm9jZXNzLmVudi5NU19BUFBfUEFTU1dPUkRcbiAgfSxcbiAgYXV0aDoge1xuICAgIHRva2VuSG9zdDogJ2h0dHBzOi8vbG9naW4ubWljcm9zb2Z0b25saW5lLmNvbScsXG4gICAgYXV0aG9yaXplUGF0aDogJ2NvbW1vbi9vYXV0aDIvdjIuMC9hdXRob3JpemUnLFxuICAgIHRva2VuUGF0aDogJ2NvbW1vbi9vYXV0aDIvdjIuMC90b2tlbidcbiAgfVxufVxuY29uc3Qgb2F1dGgyID0gT2F1dGgyLmNyZWF0ZShjcmVkZW50aWFscylcblxuZnVuY3Rpb24gZ2V0QXV0aFVybCAodXNlcikge1xuICBjb25zdCB1cmwgPSBvYXV0aDIuYXV0aG9yaXphdGlvbkNvZGUuYXV0aG9yaXplVVJMKHtcbiAgICByZWRpcmVjdF91cmk6IHByb2Nlc3MuZW52Lk1TX1JFRElSRUNUX1VSSSxcbiAgICBzY29wZTogcHJvY2Vzcy5lbnYuTVNfQVBQX1NDT1BFUyxcbiAgICBzdGF0ZTogdXNlclxuICB9KVxuICBkZWJ1ZyhgR2VuZXJhdGVkIGF1dGggdXJsOiAke3VybH1gKVxuICByZXR1cm4gdXJsXG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldFRva2VuRnJvbUNvZGUgKGF1dGhDb2RlLCByZXMpIHtcbiAgbGV0IHJlc3VsdCA9IGF3YWl0IG9hdXRoMi5hdXRob3JpemF0aW9uQ29kZS5nZXRUb2tlbih7XG4gICAgY29kZTogYXV0aENvZGUsXG4gICAgcmVkaXJlY3RfdXJpOiBwcm9jZXNzLmVudi5NU19SRURJUkVDVF9VUkksXG4gICAgc2NvcGU6IHByb2Nlc3MuZW52Lk1TX0FQUF9TQ09QRVNcbiAgfSlcblxuICBjb25zdCB0b2tlbiA9IG9hdXRoMi5hY2Nlc3NUb2tlbi5jcmVhdGUocmVzdWx0KVxuICBkZWJ1ZygnVG9rZW4gY3JlYXRlZCcpXG5cbiAgY29uc3QgdXNlciA9IGp3dC5kZWNvZGUodG9rZW4udG9rZW4uaWRfdG9rZW4pXG5cbiAgcmV0dXJuIHtcbiAgICB0b2tlbjogdG9rZW4udG9rZW4uYWNjZXNzX3Rva2VuLFxuICAgIHJlZnJlc2hUb2tlbjogdG9rZW4udG9rZW4ucmVmcmVzaF90b2tlbixcbiAgICB0b2tlbkV4cGlyZXM6IHRva2VuLnRva2VuLmV4cGlyZXNfYXQuZ2V0VGltZSgpLFxuICAgIHVzZXJOYW1lOiB1c2VyLm5hbWVcbiAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiByZWZyZXNoVG9rZW4gKHJlZnJlc2hUb2tlbikge1xuICBjb25zdCB0b2tlbiA9IGF3YWl0IG9hdXRoMi5hY2Nlc3NUb2tlbi5jcmVhdGUoeyByZWZyZXNoX3Rva2VuOiByZWZyZXNoVG9rZW4gfSkucmVmcmVzaCgpXG4gIHJldHVybiB7XG4gICAgdG9rZW46IHRva2VuLnRva2VuLmFjY2Vzc190b2tlbixcbiAgICByZWZyZXNoVG9rZW46IHRva2VuLnRva2VuLnJlZnJlc2hfdG9rZW4sXG4gICAgdG9rZW5FeHBpcmVzOiB0b2tlbi50b2tlbi5leHBpcmVzX2F0LmdldFRpbWUoKSxcbiAgICB1c2VyTmFtZTogdXNlci5uYW1lXG4gIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0VXNlclRva2VuICh1aWQsIGNvbnRyb2xsZXIpIHtcbiAgY29uc3QgdXNlciA9IGF3YWl0IGNvbnRyb2xsZXIuc3RvcmFnZS51c2Vycy5nZXQodWlkKVxuICBpZiAoIXVzZXIgfHwgIXVzZXIubXNUb2tlbikge1xuICAgIHJldHVybiB7XG4gICAgICB1c2VyRXhpc3RzOiAhIXVzZXIsXG4gICAgICB0b2tlbkV4aXN0czogISF1c2VyICYmICEhdXNlci5tc1Rva2VuXG4gICAgfVxuICB9XG4gIHJldHVybiB7XG4gICAgdXNlckV4aXN0czogdHJ1ZSxcbiAgICB0b2tlbkV4aXN0czogdHJ1ZSxcbiAgICB0b2tlbjogSlNPTi5wYXJzZShjcnlwdHIuZGVjcnlwdCh1c2VyLm1zVG9rZW4pKVxuICB9XG59XG5cbmV4cG9ydCB7XG4gIGdldEF1dGhVcmwsXG4gIGdldFRva2VuRnJvbUNvZGUsXG4gIHJlZnJlc2hUb2tlbixcbiAgZ2V0VXNlclRva2VuXG59XG4iXX0=