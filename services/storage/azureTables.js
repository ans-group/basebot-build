'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _azureStorage = require('azure-storage');var _azureStorage2 = _interopRequireDefault(_azureStorage);
var _util = require('util');
var _logger = require('../logger');var _logger2 = _interopRequireDefault(_logger);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

const debug = (0, _logger2.default)('services:storage:azureTables', 'debug');
const error = (0, _logger2.default)('services:storage:azureTables', 'error');

const tablePrefix = (process.env.BOT_NAME || 'basebot').replace(/[^a-zA-Z0-9]/g, '').toLowerCase();
const teamsRef = `${tablePrefix}Teams`;
const usersRef = `${tablePrefix}Users`;
const channelsRef = `${tablePrefix}Channels`;

const driver = {
  teams: {
    get: get(teamsRef),
    save: save(teamsRef),
    all: all(teamsRef) },

  channels: {
    get: get(channelsRef),
    save: save(channelsRef),
    all: all(channelsRef) },

  users: {
    get: get(usersRef),
    save: save(usersRef),
    all: all(usersRef) } };exports.default =



driver;

const tableService = _azureStorage2.default.createTableService(process.env.DB_URL);
const entGen = _azureStorage2.default.TableUtilities.entityGenerator;

// promisifiy all the things
const createTableIfNotExists = (0, _util.promisify)(tableService.createTableIfNotExists).bind(tableService);
const retrieveEntity = (0, _util.promisify)(tableService.retrieveEntity).bind(tableService);
const insertOrMergeEntity = (0, _util.promisify)(tableService.insertOrMergeEntity).bind(tableService);
const queryEntities = (0, _util.promisify)(tableService.queryEntities).bind(tableService);

function get(table) {
  return id => new Promise(async (resolve, reject) => {
    debug(`attempting to fetch document with ID: ${id}`);
    try {
      await createTableIfNotExists(table);
      const { Data } = await retrieveEntity(table, 'partition', id);
      const data = JSON.parse(Data['_']);
      debug(`document retrieved:`, data);
      resolve(data);
    } catch (err) {
      error(err);
      resolve(null);
    }
  });
}

function save(table) {
  return data => new Promise(async (resolve, reject) => {
    debug('saving: ', data);
    try {
      await createTableIfNotExists(table);
      let existingData = {};
      try {
        const { Data } = await retrieveEntity(table, 'partition', data.id);
        existingData = Data && JSON.parse(Data['_']) ? JSON.parse(Data['_']) : {};
      } catch (err) {
        error(new Error(err));
      }
      await insertOrMergeEntity(table, {
        PartitionKey: entGen.String('partition'),
        RowKey: entGen.String(data.id),
        Data: entGen.String(JSON.stringify(Object.assign({}, existingData, data))) });

      resolve();
    } catch (err) {
      error(new Error(err));
      reject(err);
    }
  });
}

function all(table) {
  return () => new Promise(async (resolve, reject) => {
    debug(`fetching all records in: ${table}`);
    try {
      await createTableIfNotExists(table);
      const { entries } = await queryEntities(table, new _azureStorage2.default.TableQuery(), null);
      const data = Object.keys(entries).map(key => JSON.parse(entries[key].Data['_']));
      resolve(data);
    } catch (err) {
      error(err);
      reject(err);
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,